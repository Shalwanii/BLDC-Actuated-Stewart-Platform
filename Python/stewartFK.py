# stewart_fk.py
import numpy as np

DEG = np.pi/180

# ===== Geometry (mm) =====
LA = 69.0
LB = 150.0
RB, SB = 95.103, 15.5
RP, SP = 49.235, 11.0

# Sector angles (deg): your layout [0,0,120,120,240,240]
BETA_DEG = np.array([0, 0, 120, 120, 240, 240], dtype=float)

# Motor naming: [1L,1R,2L,2R,3L,3R]
LEFT_IDX  = [0, 2, 4]   # start at 180°
RIGHT_IDX = [1, 3, 5]   # start at 0°
NAMES = ["1L","1R","2L","2R","3L","3R"]

# # ===== Your 50 poses (deg) in order [1L,1R,2L,2R,3L,3R] =====

# Desired angles
# POSES = [
#  [ -1.286,   1.286,  -7.929, -20.571, -25.286, -11.571],  # row 1
#  [ -5.571, -21.000, -13.071,  -1.929,  25.929,  -0.857],  # row 2
#  [-10.500, -20.786, -14.571, -12.857,  -1.714, -16.071],  # row 3
#  [ 11.786, -24.000, -19.714, -20.357,   0.429,   6.643],  # row 4
#  [ -9.643, -26.143, -19.929, -18.857,  -8.143,  -5.786],  # row 5
#  [-14.143, -25.286, -24.429,  15.000,  12.429,   4.929],  # row 6
#  [  2.786, -19.071, -28.500,  -6.000,  -0.214,   5.571],  # row 7
#  [-10.714, -21.429, -22.929, -10.286,  -5.571,  -5.786],  # row 8
#  [-12.429, -21.429, -21.214,  -1.286,  -2.143,  -5.357],  # row 9
#  [ -2.571, -25.500, -33.214,  -5.357,   0.000,   8.786],  # row 10
#  [-15.214, -24.643, -25.714,   8.143,   3.214,  -0.429],  # row 11
#  [-31.500,   7.071,  30.000,  17.143,   2.786, -31.071],  # row 12
#  [-34.286,   1.286,   4.714,   4.929,  -0.643, -28.714],  # row 13
#  [  7.714,   2.357,  -2.143, -10.500,  -3.429,  -8.786],  # row 14
#  [ -3.214, -13.714, -15.857, -20.786, -14.571,  -4.929],  # row 15
#  [  3.643,  28.929,   7.929, -22.071, -32.357,  -2.786],  # row 16
#  [  3.857,  18.214, -13.286, -28.286, -33.857,   3.214],  # row 17
#  [-12.643,   1.714, -16.714, -21.214, -29.143,  -4.714],  # row 18
# #  [-29.357,   1.286,  -3.643,  27.000,   8.786,  -3.643],  # row 19
#  [-23.571,  -9.857, -18.214,   9.000,  -3.429,  -8.786],  # row 20
#  [-24.214,  30.000,  14.571,   5.571, -19.714, -15.000],  # row 21
#  [-28.929,  32.357,  25.714,  25.286,  -7.500, -15.214],  # row 22
#  [-20.786,  27.643,  18.643,  25.929,   2.143,   5.143],  # row 23
#  [  6.643,   2.357, -17.357,   7.286,  -0.214,  25.714],  # row 24
#  [-12.857,  -9.643, -19.500,   4.929,   0.000,   8.571],  # row 25
# #  [-14.357, -15.214, -20.571,  16.714,  20.143,  13.286],  # row 26
#  [-11.357,  10.929,  -9.857,  12.429,   3.857,   8.786],  # row 27
#  [ 30.214, -12.000, -13.286, -19.714,  -4.929,  16.071],  # row 28
#  [ -0.214, -27.000, -23.571, -11.786,   0.000,  -0.857],  # row 29
#  [  1.929, -24.429, -22.071, -20.357,  -3.429,   7.071],  # row 30
#  [  7.714, -15.000, -25.500, -15.857,  -3.643,  16.286],  # row 31
#  [ -0.857,  -4.286,   6.857, -16.714, -11.786,  -3.214],  # row 32
#  [ -6.000, -10.500,   0.429, -13.929, -10.286,  -4.071],  # row 33
#  [-10.071, -24.000,  -7.286,   1.071,  18.857,  -6.214],  # row 34
#  [ -1.500, -31.714, -24.000,  -3.857,  17.357,  13.286],  # row 35
#  [  0.643, -32.357, -31.714,  -2.786,  10.071,  14.786],  # row 36
#  [  0.214, -30.000, -27.643,  -7.714,   4.286,   1.286],  # row 37
#  [-21.429,  -1.714,  19.714,   3.643,   1.071, -27.214],  # row 38 
#  [-31.500,  -6.000,  12.643,  17.143,   9.429, -28.071],  # row 39
#  [-28.929,  -7.929,   4.286,   4.286,   9.214, -27.214],  # row 40
#  [ 22.286, -20.786, -10.500,  -9.000,  14.571,  12.643],  # row 41
#  [-12.000, -26.571, -15.214,  -9.214,   8.357, -11.786],  # row 42
#  [ -4.714, -30.643, -14.571,  -2.143,  25.929,  -4.714],  # row 43
#  [-17.143,  29.786,  28.714,   0.000, -11.571, -18.000],  # row 44
#  [-16.714,  10.500,   7.714,  -6.643, -15.429,  -8.143],  # row 45
#  [-10.714,  -3.000, -15.643, -20.786, -28.071,   1.071],  # row 46
#  [-13.929,   6.429,   7.071, -17.786, -29.357,  -9.429],  # row 47
#  [-15.214,  -0.214,  -7.286, -22.929, -31.714,  -7.714],  # row 48
#  [ -9.429,  -3.643, -11.786, -24.643, -28.071,  -4.714],  # row 49
#  [-12.857,   9.429,  26.143, -12.214, -20.357, -16.071],  # row 50
# ]

# Actual achieved angles (run 1)
# POSES = [
#  [ -4.929,  -1.714, -10.714, -17.786, -24.857, -12.429],  # row 1
#  [ -3.214, -22.286, -16.286,   1.500,  23.357,   1.929],  # row 2
#  [-12.000, -22.929, -12.643, -16.071,  -2.786, -13.714],  # row 3
#  [ 12.429, -26.571, -19.071, -18.643,  -2.571,   7.071],  # row 4
#  [ -7.286, -30.000, -23.357, -21.214, -11.143,  -4.071],  # row 5
#  [-10.500, -25.071, -25.500,  13.071,   9.429,   7.500],  # row 6
#  [  0.643, -20.143, -29.786,  -2.571,   1.500,   4.714],  # row 7
#  [ -6.429, -24.643, -22.714,  -8.357,  -7.929,  -6.214],  # row 8
#  [ -8.786, -21.429, -21.000,  -4.286,   0.000,  -1.929],  # row 9
#  [  0.857, -26.357, -31.929,  -3.857,   4.286,  12.429],  # row 10
#  [-13.714, -27.214, -28.714,   4.714,   0.429,  -2.786],  # row 11
#  [-34.071,   4.929,  29.571,  19.929,   0.214, -30.000],  # row 12
#  [-34.500,   4.071,   7.286,   0.857,  -2.571, -28.500],  # row 13
#  [  8.571,   2.357,  -1.500,  -9.429,   0.429,  -7.071],  # row 14
#  [  0.429, -17.357, -13.286, -24.643, -15.643,  -8.357],  # row 15
#  [  7.714,  25.286,   9.000, -22.714, -34.929,  -1.500],  # row 16
#  [  0.643,  15.429, -12.857, -26.357, -32.786,   5.786],  # row 17
#  [-14.357,   4.929, -16.929, -21.643, -28.714,  -2.357],  # row 18
#  [-31.714,   2.786,  -4.500,  29.357,   9.857,  -4.286],  # row 19
#  [-26.571,  -6.000, -18.000,  10.286,  -5.571,  -6.214],  # row 20
#  [-25.500,  31.071,  13.286,   3.643, -23.143, -11.357],  # row 21
#  [-26.786,  34.500,  28.500,  23.571,  -7.071, -13.714],  # row 22
#  [-20.143,  28.286,  22.286,  22.071,   2.357,   3.214],  # row 23
#  [  6.643,   0.643, -21.000,   4.929,  -3.643,  28.071],  # row 24
#  [-12.429,  -8.357, -22.286,   8.143,  -3.429,  12.000],  # row 25
#  [-12.000, -15.000, -23.786,  15.857,  18.214,  14.357],  # row 26
#  [-11.571,  12.857,  -8.143,  13.071,   7.500,  13.071],  # row 27
#  [ 30.857,  -8.357, -12.429, -23.786,  -7.286,  16.929],  # row 28
#  [  0.000, -25.714, -20.786, -14.143,   3.643,   2.571],  # row 29
#  [ -1.929, -23.143, -25.286, -22.714,  -5.357,   5.571],  # row 30
#  [ 12.000, -15.643, -28.714, -16.500,  -3.643,  14.786],  # row 31
#  [ -3.857,  -1.286,   4.071, -18.857,  -9.214,  -3.429],  # row 32
#  [ -3.643,  -9.214,   1.929, -14.786, -12.429,  -7.500],  # row 33
#  [-10.286, -24.214, -11.357,   0.214,  15.214,  -7.071],  # row 34
#  [  0.857, -35.357, -25.929,  -6.643,  16.929,  13.714],  # row 35
#  [ -1.929, -32.786, -32.143,  -6.857,   6.643,  12.000],  # row 36
#  [ -1.286, -29.357, -26.786, -10.286,   3.214,   3.429],  # row 37 
#  [-28.714,  -9.000,   9.429,  13.071,  11.357, -31.286],  # row 39
#  [-33.214,  -5.357,   3.214,   3.429,   8.143, -26.571],  # row 40
#  [ 22.071, -21.000,  -8.571, -12.643,  12.000,   9.643],  # row 41
#  [ -9.643, -28.929, -12.643, -11.571,   7.286, -15.214],  # row 42
#  [ -2.571, -34.286, -15.857,  -2.571,  25.071,  -4.071],  # row 43
#  [-20.571,  26.571,  24.429,  -1.500, -13.714, -16.500],  # row 44
#  [-18.643,  14.357,   7.500,  -3.643, -15.000,  -5.571],  # row 45
#  [ -8.786,  -7.071, -12.429, -24.643, -31.286,   2.786],  # row 46
#  [-17.357,   9.000,  10.929, -21.643, -28.929, -11.143],  # row 47
#  [-17.143,  -2.786,  -9.214, -24.000, -33.857, -10.500],  # row 48
#  [-10.286,  -6.429, -13.714, -25.500, -28.286,  -5.571],  # row 49
#  [-15.000,   5.786,  30.429, -12.429, -17.786, -18.643],  # row 50
# ]


# Actual achieved angles (run 2)
POSES = [
 [  0.643,   0.429,  -7.286, -23.357, -26.357, -11.571],  # row 1
 [ -3.429, -25.286, -10.071,   1.500,  24.214,  -4.714],  # row 2
 [ -6.429, -21.857, -14.357, -12.643,  -0.643, -16.500],  # row 3
 [ 12.857, -26.786, -15.643, -21.429,  -3.643,   2.786],  # row 4
 [ -9.429, -22.500, -20.786, -18.857,  -7.929,  -8.143],  # row 5
 [-14.571, -21.214, -22.929,  13.500,  10.500,   3.214],  # row 6
 [  7.071, -16.071, -24.643,  -8.357,  -3.000,   1.500],  # row 7
 [ -7.929, -19.714, -23.357,  -8.786,  -8.786,  -9.214],  # row 8
 [-14.571, -21.000, -23.571,  -3.857,  -1.500,  -3.857],  # row 9
 [ -0.429, -27.643, -33.214,  -9.214,  -3.429,   9.429],  # row 10
 [-16.071, -26.357, -27.214,   8.143,   3.214,   1.929],  # row 11
 [-33.000,   4.714,  33.643,  16.071,  -1.071, -30.429],  # row 12
 [-36.643,   2.357,   7.929,   1.500,  -2.571, -30.429],  # row 13
 [ 10.500,   1.286,  -4.714, -13.929,  -1.929,  -9.857],  # row 14
 [ -5.786,  -9.429, -13.286, -22.071, -17.357,  -9.214],  # row 15
 [  4.500,  31.286,  11.571, -23.571, -31.500,  -0.857],  # row 16
 [  5.786,  14.357, -12.857, -28.286, -37.500,   2.786],  # row 17
 [-11.143,   2.571, -21.000, -24.000, -29.786,  -1.714],  # row 18
 [-19.286, -13.286, -21.214,  10.500,  -3.214, -10.929],  # row 20
 [-24.857,  28.071,  14.571,   2.143, -21.000, -13.500],  # row 21
 [-29.786,  31.500,  24.214,  24.214,  -9.214, -18.429],  # row 22
 [-22.071,  23.786,  17.571,  24.643,   4.071,   6.429],  # row 23
 [  7.071,   2.357, -13.500,   8.357,  -1.929,  23.571],  # row 24
 [-13.929, -13.071, -19.500,   9.000,  -1.500,  12.000],  # row 25
 [ -7.929,  10.071, -12.429,  15.857,   6.214,  10.714],  # row 27
 [ 31.929, -13.071, -16.071, -16.714,  -5.357,  19.714],  # row 28
 [ -1.929, -22.929, -25.500, -13.714,  -4.071,  -4.929],  # row 29
 [ -0.643, -26.571, -23.143, -24.429,  -5.357,   8.357],  # row 30
 [ 10.286, -15.000, -25.929, -18.643,  -7.929,  12.857],  # row 31
 [ -4.286,  -4.714,   9.429, -16.714, -14.357,  -4.714],  # row 32
 [ -3.214, -14.571,   0.643, -14.143, -13.929,  -3.857],  # row 33
 [-13.071, -27.214,  -3.429,   0.214,  16.286,  -5.786],  # row 34
 [  0.429, -32.143, -27.214,  -3.000,  15.000,  14.571],  # row 35
 [  2.786, -35.143, -31.500,  -5.571,  11.357,  13.929],  # row 36
 [ -2.143, -32.571, -30.000,  -5.357,   0.000,   4.071],  # row 37
 [-22.071,   1.500,  17.357,   4.071,  -0.643, -26.357],  # row 38
 [-29.786,  -6.214,   8.786,  16.286,   9.214, -32.357],  # row 39
 [-30.000,  -6.000,   5.357,   1.500,  10.500, -24.643],  # row 40
 [ 22.286, -21.214, -13.071,  -4.714,  17.357,  12.643],  # row 41
 [ -7.929, -23.786, -16.286, -10.929,   9.000, -12.214],  # row 42
 [ -6.857, -27.857, -16.714,  -6.000,  27.214,  -7.286],  # row 43
 [-13.071,  30.857,  26.357,  -3.000,  -9.000, -16.286],  # row 44
 [-17.786,   9.643,   7.929,  -6.429, -16.500,  -7.500],  # row 45
 [-11.357,  -0.429, -15.000, -20.357, -31.286,   2.143],  # row 46
 [-16.500,   2.143,   3.214, -13.500, -31.500, -10.286],  # row 47
 [-14.357,  -2.786, -10.286, -22.929, -33.429,  -4.500],  # row 48
 [-10.714,  -6.000, -13.929, -26.571, -29.786,  -7.286],  # row 49
 [-12.643,   6.857,  30.000, -11.143, -24.429, -14.143],  # row 50
]



# ===== Kinematics helpers =====
def anchors_rs(r, s, beta_rad):
    x = r*np.cos(beta_rad) + s*np.sin(beta_rad)
    y = r*np.sin(beta_rad) - s*np.cos(beta_rad)
    return np.stack([x, y, np.zeros_like(x)], axis=1)

def R_orr(psi_deg, theta_deg, phi_deg):  # Orr order: Rz(psi) * Rx(theta) * Ry(phi)
    p, t, f = psi_deg*DEG, theta_deg*DEG, phi_deg*DEG
    cz, sz = np.cos(p), np.sin(p)
    cx, sx = np.cos(t), np.sin(t)
    cy, sy = np.cos(f), np.sin(f)
    Rz = np.array([[cz,-sz,0],[sz,cz,0],[0,0,1]])
    Rx = np.array([[1,0,0],[0,cx,-sx],[0,sx,cx]])
    Ry = np.array([[cy,0,sy],[0,1,0],[-sy,0,cy]])
    return Rz @ Rx @ Ry

def build_geometry():
    beta = BETA_DEG * DEG
    # Base motor pivots (world)
    M = anchors_rs(RB, SB, beta)
    # Platform anchors (platform frame)
    P_local = anchors_rs(RP, SP, beta)
    # Axes and zero-direction: all axes +x, zero = +z
    axes  = np.tile(np.array([1.0,0.0,0.0]), (6,1))
    u_dirs= np.tile(np.array([0.0,0.0,1.0]), (6,1))
    return M, P_local, axes, u_dirs

def norm(v, eps=1e-12):
    n = np.linalg.norm(v)
    return (v*0.0, 0.0) if n < eps else (v/n, n)

def lever_endpoint(Mi, ai, ui, theta_raw_deg):
    ai,_ = norm(ai)
    ui = ui - np.dot(ui, ai)*ai; ui,_ = norm(ui)
    vi,_ = norm(np.cross(ai, ui))           # right-handed basis in y–z plane
    th = theta_raw_deg * DEG
    return Mi + LA*(np.cos(th)*ui + np.sin(th)*vi)

# Map your command angles → raw geometric angles used by kinematics
# (Left start 180: raw = cmd + 180; Right start 0: raw = -cmd)
def cmd_to_raw(theta_cmd_deg):
    theta_cmd_deg = np.asarray(theta_cmd_deg, dtype=float)
    raw = np.empty_like(theta_cmd_deg)
    raw[LEFT_IDX]  = theta_cmd_deg[LEFT_IDX]  + 180.0
    raw[RIGHT_IDX] = -theta_cmd_deg[RIGHT_IDX]
    return raw

# ===== FK residuals and solver =====
def residuals(pose_vec, M, P_local, axes, u_dirs, theta_raw_deg):
    """
    pose_vec = [x, y, z, psi_z, theta_x, phi_y]  (xyz in mm, rpy in deg, Orr order)
    Residuals: ri = || (R * P_local[i] + t) - E_i(theta_raw[i]) || - LB
    """
    x,y,z, psi, theta, phi = pose_vec
    R = R_orr(psi, theta, phi)
    t = np.array([x,y,z])
    res = np.zeros(6)
    for i in range(6):
        Pw_i = R @ P_local[i] + t
        Ei_i = lever_endpoint(M[i], axes[i], u_dirs[i], theta_raw_deg[i])
        res[i] = np.linalg.norm(Pw_i - Ei_i) - LB
    return res

def gauss_newton_fk(theta_cmd_deg, z0_guess=160.0, max_iters=100, tol=1e-8, lm_lambda=1e-2):
    """
    Levenberg–Marquardt on leg-length residuals to estimate pose.
    Returns pose (x,y,z, psi, theta, phi) and final RMS error (mm).
    """
    M, P_local, axes, u_dirs = build_geometry()
    theta_raw = cmd_to_raw(theta_cmd_deg)

    # initial guess (close to neutral)
    p = np.array([0.0, 0.0, z0_guess, 0.0, 0.0, 0.0], dtype=float)

    def J_num(p, eps=1e-6):
        r0 = residuals(p, M, P_local, axes, u_dirs, theta_raw)
        J = np.zeros((6,6))
        for k in range(6):
            dp = p.copy(); dp[k] += eps
            rk = residuals(dp, M, P_local, axes, u_dirs, theta_raw)
            J[:,k] = (rk - r0)/eps
        return r0, J

    for _ in range(max_iters):
        r, J = J_num(p)
        # LM step: (J^T J + λ I) Δ = -J^T r
        H = J.T @ J + lm_lambda*np.eye(6)
        g = J.T @ r
        try:
            dp = -np.linalg.solve(H, g)
        except np.linalg.LinAlgError:
            dp = -np.linalg.pinv(H) @ g
        p_new = p + dp
        r_new = residuals(p_new, M, P_local, axes, u_dirs, theta_raw)
        if np.linalg.norm(r_new) < np.linalg.norm(r):
            p = p_new
            # small lambda decrease (optional)
            lm_lambda = max(lm_lambda*0.7, 1e-6)
            if np.linalg.norm(dp) < tol:
                break
        else:
            # increase damping and try a shorter step next iter
            lm_lambda *= 2.0

    rms = float(np.sqrt(np.mean(residuals(p, M, P_local, axes, u_dirs, theta_raw)**2)))
    return p, rms

# ===== Run over all poses =====
if __name__ == "__main__":
    np.set_printoptions(precision=3, suppress=True)
    for idx, pose in enumerate(POSES, 1):
        p, rms = gauss_newton_fk(pose, z0_guess=160.0)
        x,y,z, psi, theta, phi = p
        print(f"Pose {idx:02d}: xyz = [{x:.3f}, {y:.3f}, {z:.3f}] mm,  rpy (Orr) = [ψ={psi:.3f}°, θ={theta:.3f}°, φ={phi:.3f}°],  RMS={rms:.4f} mm")
